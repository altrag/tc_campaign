kind = sequential
immutable_program = true
immutable_spec = true
title = "Speculative execution"
// copy_solution_to_architecture = "Symphony2"
// copy_solution_to_level = ["symphony_15_latency_ram"]
size = [-256, -256, 255, 255]
dialogue = [
  (alien, `It is a bit wasteful to halt execution for two ticks on every JUMP instruction. Of course we cannot know if the jump is taken until the instruction reaches stage 3, but we could just guess. If we are lucky and guess correctly, we won't have wasted two ticks.

It is easiest if we always guess that the JUMP is not taken. The counter can just tick along as if nothing happened.

Then, if the JUMP ends up being taken when it reaches stage 3, we know we guessed wrong and whatever is now in stage 1 and 2 should be ignored. 

Since state is only updated in stage 3, all we need to do then is to disable stage 3 the next two ticks. You can reuse the timer custom component to keep track of this.
`),
(alien, `
To implement speculative execution, do the following:
1: Remove the JUMP timer from stage 1.
2: When a JUMP is taken, disable stage 3 for two ticks.

Note - The first instruction should always execute, but this won't be the case in later levels.
`)]
default_isa_spec = `
[settings]
name = "Symphony"

[fields]

register
zr 0000
r1 0001
r2 0010
r3 0011
r4 0100
r5 0101
r6 0110
r7 0111
r8 1000
r9 1001
r10 1010
r11 1011
r12 1100
r13 1101
sp 1110
flags 1111

[instructions]

load_8 %dest(register), [%address(register)]
01100000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_8 [%address(register)], %value(register)
01100001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_8 %dest(register), [%address(immediate)]
01110000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_8 [%address(immediate)], %value(register)
01110001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

load_16 %dest(register), [%address(register)]
01100010 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_16 [%address(register)], %value(register)
01100011 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_16 %dest(register), [%address(immediate)]
01110010 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_16 [%address(immediate)], %value(register)
01110011 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

pload_8 %dest(register), [%address(register)]
01100100 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_8 [%address(register)], %value(register)
01100101 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_8 %dest(register), [%address(immediate)]
01110100 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_8 [%address(immediate)], %value(register)
01110101 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

pload_16 %dest(register), [%address(register)]
01100110 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_16 [%address(register)], %value(register)
01100111 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_16 %dest(register), [%address(immediate)]
01110110 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_16 [%address(immediate)], %value(register)
01110111 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

or %a(register), %b(register), %c(register)
00100001 aaaabbbb 0000cccc 00000000
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(register)
00100000 aaaabbbb 0000cccc 00000000
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(register)
00100011 aaaabbbb 0000cccc 00000000
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(register)
00100010 aaaabbbb 0000cccc 00000000
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(register)
00100100 aaaabbbb 0000cccc 00000000
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(register)
00100101 aaaabbbb 0000cccc 00000000
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(register)
00100110 aaaabbbb 0000cccc 00000000
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(register)
00100111 aaaabbbb 0000cccc 00000000
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(register)
00101000 aaaabbbb 0000cccc 00000000
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
00101001 1111aaaa 0000bbbb 00000000
Compares %a and %b and store the resulting flags in r6.

mul %a(register), %b(register), %c(register)
00101010 aaaabbbb 0000cccc 00000000
MUL %b and %c and store the result in %a.

nand %a(register), %b(register), %c(immediate)
00110000 aaaabbbb cccccccc cccccccc
NAND %b and %c and store the result in %a.

or %a(register), %b(register), %c(immediate)
00110001 aaaabbbb cccccccc cccccccc
OR %b and %c and store the result in %a.

or %a(register), %b(register), %c(immediate)
00110001 aaaabbbb cccccccc cccccccc
OR %b and %c and store the result in %a.

nor %a(register), %b(register), %c(immediate)
00110011 aaaabbbb cccccccc cccccccc
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(immediate)
00110010 aaaabbbb cccccccc cccccccc
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(immediate)
00110100 aaaabbbb cccccccc cccccccc
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(immediate)
00110101 aaaabbbb cccccccc cccccccc
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(immediate)
00110110 aaaabbbb cccccccc cccccccc
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(immediate)
00110111 aaaabbbb cccccccc cccccccc
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(immediate)
00111000 aaaabbbb cccccccc cccccccc
LSR %b and %c and store the result in %a.

mul %a(register), %b(register), %c(immediate)
00111010 aaaabbbb cccccccc cccccccc
MUL %b and %c and store the result in %a.

cmp %a(register), %b(immediate)
00111001 1111aaaa bbbbbbbb bbbbbbbb
Compares %a and %b and store the resulting flags in r6.



jmp %a(register)
01001000 00001111 0000aaaa 00000000
Jump to %a


jmp %a(immediate | label)
01011000 00001111 aaaaaaaa aaaaaaaa
Jump to %a

je %a(immediate | label)
01010001 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the values were equal (reading results from 'flags').

jne %a(immediate | label)
01011001 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the values were not equal (reading results from 'flags').


jb %a(immediate | label)
01010010 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was below (unsigned) the second (reading results from 'flags').

jae %a(immediate | label)
01011010 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) or euqal to the second (reading results from 'flags').

jbe %a(immediate | label)
01010011 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the First value was below (unsigned) or equal to the second (reading results from 'flags').

ja %a(immediate | label)
01011011 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) the second (reading results from 'flags').


jl %a(immediate | label)
01010100 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) than the second (reading results from 'flags').

jge %a(immediate | label)
01011100 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) or equal to the second (reading results from 'flags').

jle %a(immediate | label)
01010101 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) or equal to the second (reading results from 'flags').

jg %a(immediate | label)
01011101 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) than the second (reading results from 'flags').

keyboard %a(register)
00001001 aaaa0000 00000000 00000000
Loads keyboard input and stores it to %a

console %a(register)
00000011 00000000 0000aaaa 00000000
Stores the value of %a in the console offset register

console %a(immediate)
00010011 00000000 0000aaaa 00000000
Stores the value of %a in the console offset register

time_0 %a(register)
00000100 aaaa0000 00000000 00000000
Loads the first two bytes of the time value and stores it to %a

time_1 %a(register)
00000101 aaaa0000 00000000 00000000
Loads the second two bytes of the time value and stores it to %a

time_2 %a(register)
00000110 aaaa0000 00000000 00000000
Loads the third two bytes of the time value and stores it to %a

time_3 %a(register)
00000111 aaaa0000 00000000 00000000
Loads the fourth two bytes of the time value and stores it to %a

counter %a(register)
00001000 aaaa0000 00000000 00000000
Loads the counter value and stores it to %a

load_8 %dest(register), [%address(register)]
01100000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_8 [%address(register)], %value(register)
01100001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_8 %dest(register), [%address(immediate)]
01110000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_8 [%address(immediate)], %value(register)
01110001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

load_16 %dest(register), [%address(register)]
01100010 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_16 [%address(register)], %value(register)
01100011 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_16 %dest(register), [%address(immediate)]
01110010 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_16 [%address(immediate)], %value(register)
01110011 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

pload_8 %dest(register), [%address(register)]
01100100 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_8 [%address(register)], %value(register)
01100101 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_8 %dest(register), [%address(immediate)]
01110100 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_8 [%address(immediate)], %value(register)
01110101 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

pload_16 %dest(register), [%address(register)]
01100110 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_16 [%address(register)], %value(register)
01100111 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_16 %dest(register), [%address(immediate)]
01110110 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_16 [%address(immediate)], %value(register)
01110111 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD



nop
00000000 00000000 00000000 00000000
Does nothing

mov %a(register), %b(register)
01000001 aaaabbbb 00000000 00000000
Move from %a to %b

neg %a(register), %b(register)
01000101 aaaa0000 0000bbbb 00000000
Neg %b and store the result in %a.

not %a(register), %b(register)
01000011 aaaa0000 0000bbbb 00000000
Not %b and store the result in %a.

mov %a(register), %b(immediate)
01010001 aaaa0000 bbbbbbbb bbbbbbbb
Move from %a to %b

neg %a(register), %b(immediate)
01010101 aaaa0000 bbbbbbbb bbbbbbbb
Neg %b and store the result in %a.

not %a(register), %b(immediate)
01010011 aaaa0000 bbbbbbbb bbbbbbbb
Not %b and store the result in %a.


push %a(register)
01010101 11101110 00000000 00000010   11000011 0000aaaa 00001110 00000000
Pushes %a on to the stack. This instruction is a synonym for:   sub sp, sp, 2   store_16 [sp], %a

pop %a(register)
11000010 aaaa0000 00001110 00000000   01010100 11101110 00000000 00000010
Pops %a off the stack. This instruction is a synonym for:   load_16 %a, [sp]   add sp, sp, 2

call %a(label)
00001000 11110000 00000000 00000000   01010100 11111111 00000000 00010100   01010101 11101110 00000000 00000010   11000011 00001111 00001110 00000000   10011000 00001111 aaaaaaaa aaaaaaaa
Calls %a. Overwrites the flag register. This instruction is a synonym for:   counter flags   add flags, flags, 20   sub sp, sp, 2   store_16 [sp], flags   jmp %a

ret
11000010 11110000 00001110 00000000   01010100 11101110 00000000 00000010   10001000 00001111 00001111 00000000
Returns from the last function call. Overwrites the flag register. This instruction is a synonym for:   load_16 flags, [sp]   add sp, sp, 2   jmp flags

in %a(register)
00000001 aaaa0000 00000000 00000000
Loads an input and stores it in %a

out %a(register)
00000010 00000000 0000aaaa 00000000
Sends %a to output

out %a(immediate)
00010010 00000000 aaaaaaaa aaaaaaaa
Sends %a to output

`
default_assembly = `time_0 r1
time_1 r2
time_2 r3
time_3 r4
keyboard r5
console r1
counter r1
in r6
in r7
in r8
in r9
in r10
in r11
in r12
in r13
in sp
in flags

xor r5, r5, r12
lsr r2, r10, r12
load_8 sp, [5380]
add r2, r4, 3235
xor zr, r3, 59245
jae label_6
cmp r2, r10
label_6:
or r10, r12, r4
lsl flags, r8, r2
add r1, zr, r4
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_12:
nand r1, zr, r1
jae label_12
xor sp, r5, 12248
lsl r7, r5, r9
nand r3, sp, r11
xor r9, r9, r8
or r10, r13, flags
out r7
pload_8 r13, [494]
in r13
lsl r1, sp, r6
pload_16 r7, [4]
nor zr, r8, 9087
add r3, r9, r9
nor r8, r11, r4
nand r7, r10, flags
lsl r13, r1, 10804
pload_16 r12, [4]
and r3, r6, r12
cmp r12, r6
add r5, r2, r12
lsl r13, flags, r12
cmp r11, r1
jmp label_35
add r8, r13, r13
label_35:
jge label_38
out r9
label_38:
lsl r8, zr, r13
lsl r2, r9, r7
store_16 [5380], r3
lsr r4, r8, r9
pload_16 r3, [494]
load_16 r7, [5380]
cmp r4, r11
xor r8, r8, 16885
jmp label_49
cmp zr, r6
label_49:
sub r12, zr, 14630
pload_8 r9, [494]
nor r1, flags, 53197
store_8 [5380], r4
xor r7, flags, r2
lsl r6, r2, r12
pload_8 flags, [494]
jbe label_59
and r4, r10, sp
label_59:
lsr r7, r7, 24074
jmp label_63
jne label_64
xor flags, r2, 28194
label_64:
label_63:
lsr r9, zr, 60637
jmp label_69
lsr r11, r5, r3
label_69:
load_16 r2, [5380]
cmp r7, r13
xor r5, r13, 28091
cmp sp, sp
nor r1, r1, 35113
cmp r13, r4
lsl r3, r11, r9
store_8 [5380], r10
pload_16 zr, [494]
nand r6, r12, flags
jmp label_83
or r8, r11, sp
label_83:
jmp label_86
sub r10, r13, 16033
label_86:
nand r8, r10, 58635
pload_16 flags, [494]
add r1, flags, 27123
xor r1, r9, 7776
cmp r1, r2
load_8 r9, [5380]
and r6, r13, 63313
sub r12, r5, 7924
or r2, flags, 5672
lsl r12, r2, r13
sub r11, r9, r10
nor r9, r3, r13
ja label_101
in r10
label_101:
xor r9, zr, 20945
or zr, r11, r4
sub r7, r1, r13
jge label_107
jmp label_108
nand zr, r9, 42022
label_108:
label_107:
in r6
sub r11, r4, r2
and r7, r1, 60877
cmp r4, r11
store_16 [5380], r10
lsl r3, r3, r7
nand flags, r1, 50849
store_8 [5380], r8
cmp r7, r10
sub r5, sp, r8
nand r12, r3, 46799
jmp label_124
load_16 r11, [5380]
label_124:
or r3, r8, 20146
sub r3, r12, r13
cmp r3, sp
je label_130
nor zr, r3, 2318
label_130:
nor r2, r9, r11
out r8
pstore_16 [494], r3
nor sp, r13, 25150
in r4
store_8 [5380], r13
xor r1, flags, r6
jne label_140
in r12
label_140:
pload_8 r7, [494]
cmp sp, r7
or r12, r2, 32109
lsl r11, sp, r12
xor r10, r3, 56839
or r1, sp, r5
xor r1, zr, r1
nor r4, r11, 40902
cmp r2, r10
jmp label_152
and r9, r13, 16526
label_152:
pstore_16 [494], sp
and r12, zr, 60162
or r5, r9, r4
pstore_8 [4], r11
sub zr, r8, r12
pload_16 r8, [494]
nand r5, r4, 34139
lsr r11, r6, 19541
sub r9, r3, 31256
cmp flags, r1
lsr zr, r2, r2
cmp r1, zr
xor r8, r7, 45880
or r6, r8, 62470
sub r12, r13, 15896
xor r12, r3, 55580
sub r3, r9, r11
jmp label_172
jl label_173
nand r9, r11, r2
label_173:
label_172:
lsr r10, r10, 34469
load_8 r4, [5380]
store_16 [5380], r5
pstore_8 [494], r11
in r10
sub flags, r5, r7
jmp label_184
nor r1, r4, r5
label_184:
nor r6, r3, r2
xor r2, r9, 36510
pstore_8 [494], r13
cmp flags, sp
sub r9, r12, r13
out r13
cmp r3, r4
xor r8, r13, 47197
sub r11, r4, r12
lsl r13, zr, r13
in flags
sub r2, r12, 60376
jmp label_199
add r12, r5, r4
label_199:
jmp label_203
or r4, r2, r3
label_203:
pload_16 r9, [4]
nor flags, r7, r8
load_16 zr, [5380]
cmp r5, r12
je label_210
sub r5, zr, 32581
label_210:
add r7, sp, r12
lsr r10, r1, sp
nor r4, r3, zr
sub r7, r3, 22578
sub r6, r1, r5
lsl r1, r9, r9
cmp r10, r9
jmp label_220
label_220:
lsl r10, r11, flags
xor zr, r4, r12
or flags, r11, r9
xor r3, r10, 57299
pload_16 r2, [4]
sub r8, r3, zr
nor r3, r10, 44884
and r3, r9, 9312
in r11
lsl r5, flags, r10
lsl r11, r12, r10
or sp, r5, r10
xor sp, r3, 29296
xor r7, r1, r9
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_237:
nand r1, zr, r1
je label_237
sub r7, zr, 38255
lsl r13, r2, 22972
nor flags, zr, r10
lsr r8, r12, 57820
add r13, r6, 44601
and r4, sp, r7
lsr r10, r6, 20673
in r4
xor r12, r11, 3768
jle label_248
nand r11, flags, r6
label_248:
cmp r3, flags
jne label_252
in flags
label_252:
nor r9, r11, 47055
add r4, r6, 27648
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_257:
nand r1, zr, r1
jl label_257
lsl r1, flags, r13
in r12
cmp r5, r10
nor r5, r4, 24099
add r5, r12, 58133
xor sp, r1, r7
lsl r4, r12, r4
lsr r11, zr, 24583
jb label_267
and sp, r2, 63200
label_267:
add r9, r3, 26030
add zr, zr, r11
nor r11, r6, r8
lsr sp, r13, r6
load_8 r11, [5380]
jmp label_275
nor r12, r11, r5
label_275:
lsl flags, sp, r11
jmp label_279
in r8
label_279:
lsr sp, sp, 26191
load_8 r7, [5380]
pload_8 r9, [4]
jbe label_286
nor r12, r4, r12
label_286:
jge label_289
lsr r1, r2, 63830
label_289:
and r11, r9, r11
cmp r4, flags
load_16 r6, [5380]
xor r13, r9, 11954
nand r9, zr, 37472
pload_8 zr, [4]
add r2, r4, r11
and r7, zr, r11
xor r5, zr, sp
lsl zr, r4, r3
xor r6, r7, 33033
out r4
add r1, r13, 47569
jle label_305
lsr r7, zr, r12
label_305:
lsl r6, zr, 50157
add r4, r1, 23976
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_310:
nand r1, zr, r1
jle label_310
load_16 zr, [5380]
out r11
nand r10, flags, 28765
store_8 [5380], r6
lsr r9, r8, flags
nand sp, r12, 2929
jmp label_318
jmp label_319
in r10
label_319:
label_318:
lsl r5, r5, 17877
out r1
lsl r9, r1, 11985
add r12, flags, r5
add r6, r10, flags
jb label_328
pload_16 r11, [4]
label_328:
lsr r8, sp, r5
store_16 [5380], sp
and r10, r12, 17937
sub flags, r1, r4
add r10, r2, 48428
or r2, r1, 65116
in r6
add r4, r9, 37414
nand r13, r1, 41569
xor r10, r4, r2
xor r9, r1, 58782
lsr flags, r3, r1
out r3
and r2, r2, flags
xor r4, r7, 33830
sub r11, r5, r6
and r10, r2, r1
xor r4, r9, 15681
pload_8 r11, [4]
nand r1, r4, zr
in r4
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_355:
nand r1, zr, r1
jmp label_355
pload_16 r1, [4]
lsr r4, r4, 12595
in r2
jg label_360
sub r7, r9, 1870
label_360:
store_16 [5380], r6
nor r11, r3, sp
nor r5, flags, 47341
sub flags, r8, 49451
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_368:
nand r1, zr, r1
jmp label_368
sub r10, r10, r5
nand r4, sp, r7
add r9, r11, 64921
out r7
jne label_374
lsr zr, r2, 4798
label_374:
add r13, r3, r13
lsr r10, zr, r1
nor r3, r4, r11
and zr, r8, 45182
in r9
add r10, r9, r8
cmp r4, r13
xor r11, r10, 15858
store_8 [5380], r12
nand r10, r7, 39695
or r4, r5, 9828
lsl r13, r11, 40819
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_389:
nand r1, zr, r1
jne label_389
cmp flags, r11
and r6, r12, 16962
or r7, r4, 8414
lsl r5, flags, r3
sub r2, r7, 11076
pstore_16 [494], r10
load_16 r3, [5380]
xor r13, r7, r13
out r8
lsl r7, r11, flags
lsl r10, zr, flags
out r10
pstore_16 [4], sp
in r7
xor r13, r11, 39488
lsl r7, r4, 24263
nand r9, r1, r10
cmp r7, r2
sub sp, r2, 9398
cmp r10, r12
jmp label_412
jmp label_413
xor sp, sp, flags
label_413:
label_412:
in r9
or sp, r11, r7
jmp label_419
or r1, r4, 24949
label_419:
nand r11, r5, 20066
lsl r8, r9, r11
add sp, r10, 56637
lsl flags, zr, 6535
lsr r5, r8, r10
and r1, r11, 1725
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_428:
nand r1, zr, r1
jbe label_428
nor r12, r13, 35370
or r4, r8, 54808
or r10, r13, zr
add r6, r11, 3029
je label_436
lsl r3, zr, r7
label_436:
jmp label_440
and r4, r7, 1979
label_440:
nand r5, r9, r11
sub flags, r1, r2
jae label_445
sub r11, r2, r11
label_445:
store_16 [5380], r1
xor r2, r4, 54201
in r5
cmp flags, sp
out r6
lsr r7, r9, r12
cmp r5, sp
lsl r3, sp, 59537
or sp, r8, sp
cmp sp, flags
jg label_458
sub r1, r4, 34078
label_458:
sub r9, zr, 35708
store_8 [5380], zr
or r1, r9, 5287
jmp label_464
pload_8 zr, [494]
label_464:
nor sp, r8, sp
jmp label_468
and r3, r12, r6
label_468:
and r10, r10, 41093
add r8, r7, 4628
load_8 zr, [5380]
or r10, r9, sp
store_16 [5380], r12
nand r10, r11, r13
and r1, r1, 64108
and r3, r9, r8
lsl r8, zr, r3
load_8 r5, [5380]
nand r5, r13, r11
add r13, r9, 25955
xor r7, r2, r12
nand r12, r1, 46834
nor r7, flags, r7
load_16 sp, [5380]
jne label_487
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_488:
nand r1, zr, r1
jne label_488
label_487:
or zr, r11, 55324
jmp label_492
add flags, r5, sp
label_492:
lsr r1, sp, r1
nand r7, r12, r9
lsl zr, r13, 50768
sub r9, r6, r12
sub zr, zr, flags
and r3, r9, 27505
jb label_501
lsl r5, r13, r8
label_501:
out r12
store_8 [5380], sp
cmp sp, r6
xor sp, r3, r3
nand flags, r13, r12
jmp label_509
jle label_510
nand r6, zr, zr
label_510:
label_509:
lsl sp, r5, r10
pload_8 zr, [4]
cmp r1, r5
nor r1, r1, 6757
jg label_518
jmp label_519
pload_8 r13, [4]
label_519:
label_518:
and r5, r10, r12
lsl zr, r2, r9
out r4
jmp label_526
store_16 [5380], r8
label_526:
store_16 [5380], r6
jmp label_530
store_16 [5380], r9
label_530:
in r5
nand r1, r13, 33563
jmp label_535
jb label_536
or r7, r5, 54151
label_536:
label_535:
jl label_540
add r1, r2, 30640
label_540:
or flags, r10, 33456
lsr r1, r9, 12465
xor r13, r13, 58307
and r2, r13, 52553
lsl r4, zr, 59487
load_8 flags, [5380]
jge label_549
cmp sp, r10
label_549:
store_8 [5380], r8
lsl sp, r7, flags
cmp r2, r5
nor r5, r12, 36334
and flags, r3, sp
nor r10, r3, 51851
add r5, zr, 21077
pstore_16 [4], r10
and zr, r10, 18065
or r4, r2, r1
lsr r6, r10, 50284
nor flags, r11, 7175
in r1
sub flags, r3, 33902
store_16 [5380], r6
in r2
nand r8, r1, 50633
jmp label_570
jge label_571
jmp label_572
jmp label_573
lsl r12, r2, r11
label_573:
label_572:
label_571:
label_570:
nor flags, flags, 41387
and r8, zr, 50500
lsr r2, r6, r2
lsl r9, r7, flags
pstore_8 [4], r4
pload_16 r6, [4]
cmp r5, r10
jmp label_586
pload_8 r12, [494]
label_586:
or r8, sp, 16838
out r3
lsl r13, r11, 8792
and r11, flags, r10
and sp, r3, 39129
add r12, r11, 29171
add zr, r13, r12
sub r1, r9, r4
pstore_16 [4], r9
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_598:
nand r1, zr, r1
jl label_598
add r3, sp, r1
nand zr, r10, 25526
xor r3, r7, 38623
nor r12, r9, 46883
xor r8, flags, 54316
or r8, r12, r5
lsl r2, r2, r4
or r2, r6, flags
lsl r13, r13, zr
lsl r11, r2, r1
cmp r8, zr
cmp r3, sp
sub r8, flags, 24225
out r12
and r11, sp, 57854
nor r4, r1, 8183
lsr r5, r5, 44923
cmp r8, r3
nand r8, zr, 12354
nor flags, r8, r8
add r12, r11, 36600
cmp r3, r3
nand r11, r11, 65287
and r11, r1, 37570
cmp r6, r4
add r4, r11, 26309
jmp label_627
jle label_628
add r1, r2, 35332
label_628:
label_627:
xor r3, r11, r11
add r3, r9, 37837
lsl r10, r12, 54539
cmp r8, r7
nor sp, r8, r11
and r10, r4, 40862
in zr
sub r8, r12, 44691
add r4, r9, 4235
cmp r6, r10
or r1, r4, r13
and r9, r13, r4
load_8 sp, [5380]
xor r2, r7, r6
or r4, r8, zr
nand r4, sp, sp
pload_8 zr, [494]
out r7
cmp r12, r8
store_16 [5380], r1
jmp label_652
add r1, zr, r13
label_652:
out r2
add r1, r3, 42664
or sp, r4, sp
sub zr, r13, 5205
sub r9, r7, r5
sub r8, r9, r5
sub r3, r9, 55143
nand r5, r7, 24015
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_663:
nand r1, zr, r1
jle label_663
xor r12, sp, 63561
nand r13, zr, r11
and r7, r2, r10
lsl r9, r13, r11
add r6, r2, r4
in r13
lsl r11, r3, r6
nand r13, r10, r11
pstore_16 [4], r7
jbe label_674
cmp r6, r12
label_674:
out r4
pload_8 r6, [494]
nand r9, r6, r7
nor r5, flags, 50563
load_8 r10, [5380]
lsl r1, r9, r12
in r1
jbe label_684
lsl r11, r4, 18375
label_684:
lsr r11, r2, r5
sub r5, r12, 21909
lsr r4, flags, 9394
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_690:
nand r1, zr, r1
jae label_690
jmp label_692
nand r1, zr, 32487
label_692:
jmp label_695
label_695:
add r3, zr, 44578
lsr r4, r2, 12961
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_700:
nand r1, zr, r1
jb label_700
nor r2, r7, 30605
xor r3, r12, r6
add r8, r12, r1
sub r4, r2, 63857
lsr r2, r8, r12
pload_16 r10, [4]
lsr r8, r4, r10
out r12
sub r13, r11, r8
lsl flags, r6, sp
jge label_714
add r2, r4, r7
label_714:
sub r4, r9, r13
load_8 r8, [5380]
xor r11, r5, 32605
or r3, r8, 62885
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_721:
nand r1, zr, r1
jle label_721
xor r6, r4, 50674
jmp label_724
out flags
label_724:
and r7, r9, r5
add r5, r6, 590
xor r6, r8, 25973
lsl r3, r2, 43378
je label_731
add r5, flags, 19499
label_731:
and zr, r9, 3440
cmp r6, r13
cmp r7, r4
pstore_8 [494], r6
nor r9, r2, 48440
lsr r11, r13, r10
load_16 r2, [5380]
or r6, r10, 23820
jmp label_742
jl label_743
lsr r7, r2, 64759
label_743:
label_742:
out r8
and r9, r5, 21494
and r11, r13, r9
jmp label_750
in r12
label_750:
jmp label_753
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_754:
nand r1, zr, r1
jmp label_754
label_753:
xor r4, r11, 6381
nor r10, r9, 23914
cmp zr, r5
sub flags, r1, 20707
nor flags, r4, r11
xor r11, r1, r5
nand r6, r11, 40675
pstore_8 [4], r5
or r4, r3, r6
xor flags, zr, 41497
load_16 r12, [5380]
nand r13, r11, r6
load_16 r5, [5380]
cmp zr, r10
nor r9, r4, 36204
pstore_8 [494], zr
jmp label_773
and r9, r2, 47855
label_773:
jmp label_776
nand r5, sp, 10327
label_776:
pstore_8 [494], r5
in r11
sub r3, r3, 17062
or r10, r5, r8
nor r2, sp, 37180
nand zr, sp, 29214
and r9, r9, 62324
nand r6, r9, 40458
in r4
lsl r1, r3, 27950
or r2, r8, r5
jne label_790
sub r4, r7, r12
label_790:
lsr r12, r3, 36238
xor zr, r4, 13081
and r3, r3, 34081
and r12, r5, 34263
add r12, r13, 44654
cmp zr, r12
and r8, r6, r11
lsl flags, r13, r12
lsr r6, r12, 23005
pstore_8 [494], r10
and r4, r4, 34420
nand r13, sp, r8
jl label_805
lsr r7, r10, r4
label_805:
lsr sp, flags, sp
in r1
sub r12, r9, r12
jmp label_811
pload_16 r11, [494]
label_811:
sub r9, r2, r9
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_815:
nand r1, zr, r1
je label_815
lsr flags, r1, 17721
cmp r6, sp
or r11, r2, r3
and r4, r4, r6
cmp zr, r13
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_822:
nand r1, zr, r1
jg label_822
ja label_824
or r13, zr, 2835
label_824:
lsl r12, r9, 35712
nand r13, zr, r8
and r9, r3, 9830
store_8 [5380], r4
in r3
je label_832
lsl r7, flags, sp
label_832:
add r3, r3, 18775
lsr r2, r2, 17773
add r9, r5, zr
nor r5, r12, r6
or r2, r9, flags
out r13
and r7, r13, r10
in r3
xor r3, r5, r5
nand r1, r9, r10
jmp label_845
and r2, r13, r10
label_845:
lsl r4, r8, r1
cmp r8, r4
jae label_850
nor r9, r2, r7
label_850:
and flags, r4, 8746
or flags, r6, r12
add r2, r6, sp
load_16 flags, [5380]
and zr, r7, r7
jmp label_859
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_860:
nand r1, zr, r1
jle label_860
label_859:
or r12, sp, 16840
lsl r11, r1, 39212
xor flags, r4, sp
nor r9, r9, r13
and r7, r7, 59273
cmp r11, r11
nor r1, r12, 5965
nor r8, sp, 17127
nor r1, r6, 62795
jl label_872
cmp r1, r1
label_872:
pload_8 r3, [4]
sub flags, r1, 65253
cmp r7, r12
or sp, r11, r2
out r8
jmp label_880
nor r1, r5, 35387
label_880:
store_8 [5380], r10
load_8 r3, [5380]
add r10, r10, 23781
and r8, sp, r4
xor zr, flags, 775
lsl flags, r5, 43128
and r8, r13, 10641
jmp label_890
and sp, r13, r13
label_890:
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_893:
nand r1, zr, r1
jne label_893
nand r2, r2, 4308
in r8
and r3, sp, 55951
lsl r4, zr, 50954
add flags, zr, r10
jmp label_901
or r1, flags, 4659
label_901:
store_8 [5380], r10
and r7, zr, 17962
pstore_16 [4], flags
cmp r8, r6
pload_8 zr, [4]
jmp label_909
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_910:
nand r1, zr, r1
jmp label_910
label_909:
cmp r10, r7
pstore_8 [494], sp
xor zr, r5, r1
or r12, r12, r4
or r13, r11, 47032
or r7, r2, r8
xor r7, r1, 17973
nor r3, r2, 20162
nor r10, r11, r8
cmp r5, r2
cmp r3, r7
lsr r4, r6, r9
sub r11, r4, 10214
lsr r13, r10, flags
lsr zr, r3, 6148
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_928:
nand r1, zr, r1
jae label_928
sub r5, r8, r6
in zr
sub r2, r1, r4
nor r7, r9, r13
jl label_934
sub r8, r9, 23832
label_934:
or r4, r4, r4
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_938:
nand r1, zr, r1
jbe label_938
lsr r6, r5, 44808
and flags, r13, 2922
and r8, r12, 56886
nand zr, r1, 21031
cmp r13, r11
out r7
lsl r5, r13, 56357
lsl r1, r3, r8
jne label_948
add r11, r5, 12596
label_948:
nand r9, r3, 56526
jmp label_952
and r6, r2, 64622
label_952:
lsl r7, r12, 21880
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_956:
nand r1, zr, r1
jbe label_956
store_8 [5380], sp
pload_8 r10, [4]
or r7, r11, r10
jmp label_961
and r11, r5, 44058
label_961:
store_16 [5380], r11
store_8 [5380], r7
pload_8 r2, [494]
cmp r3, r7
jmp label_968
nand r6, sp, r8
label_968:
lsl r12, r11, 1924
and sp, r13, 19623
cmp r12, r1
lsr flags, r1, r4
jmp label_975
add flags, flags, 14846
label_975:
nand sp, r1, r3
nand r7, r12, r11
nand r13, r11, 28471
jmp label_981
nor r8, zr, 20773
label_981:
add r10, r5, 35344
sub r9, r10, 2045
jge label_986
lsl r3, r5, r7
label_986:
jmp label_989
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_990:
nand r1, zr, r1
jle label_990
label_989:
or r6, r8, r9
and r4, r1, 16511
cmp r6, r9
lsl r6, zr, r4
or r12, r2, r4
jmp label_998
label_998:
`