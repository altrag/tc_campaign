
const OP_IO  = 0
const OP_ALU = 1
const OP_JMP = 2
const OP_RAM = 3

def wide_instruction_to_str(instruction: Int) String {

    let mode            = (instruction >> 29) & 0b11
    let opcode          = (instruction >> 24) & 0b1111
    let dest            = ((instruction >> 37) & 0b111) << 4 | ((instruction >> 20) & 0b1111)
    let a               = ((instruction >> 34) & 0b111) << 4 | ((instruction >> 16) & 0b1111)
    let b               = ((instruction >> 31) & 0b111) << 4 | ((instruction >>  8) & 0b1111)
    let immediate       = (instruction >> 28) & 1 != 0
    let immediate_value =  instruction & 0xffff

    let dest_str = `r{dest}`
    let a_str = `r{a}`
    var b_str = ""

    if immediate {

        b_str = str(immediate_value)

    } else {

        b_str = `r{b}`

    }

    switch mode

        OP_IO {

            const NOP      = 0
            const IN       = 1
            const OUT      = 2
            const CONSOLE  = 3
            const TIME_0   = 4
            const TIME_1   = 5
            const TIME_2   = 6
            const TIME_3   = 7
            const COUNTER  = 8
            const KEYBOARD = 9

            switch opcode
                NOP      { return `nop (does nothing)` }
                IN       { return `in {dest_str}` }
                OUT      { return `out {b_str}` }
                CONSOLE  { return `console {b_str}` }
                TIME_0   { return `time_0 {dest_str}` }
                TIME_1   { return `time_1 {dest_str}` }
                TIME_2   { return `time_2 {dest_str}` }
                TIME_3   { return `time_3 {dest_str}` }
                COUNTER  { return `counter {dest_str}` }
                KEYBOARD { return `keyboard {dest_str}` }

        }

        OP_ALU {

            var opcode_str = ""

            switch opcode
                0 { opcode_str = "nand" }
                1 { opcode_str = "or"  }
                2 { opcode_str = "and" }
                3 { opcode_str = "nor" }
                4 { opcode_str = "add" }
                5 { opcode_str = "sub" }
                6 { opcode_str = "xor" }
                7 { opcode_str = "lsl" }
                8 { opcode_str = "lsr" }
                9 { return `cmp {a_str}, {b_str}` }
                10 { opcode_str = "mul" }

            return `{opcode_str} {dest_str}, {a_str}, {b_str}`

        }

        OP_JMP {

            switch opcode
                0b1000  { return `jmp {b_str}` }
                0b0001  { return `je {b_str}` }
                0b1001  { return `jne {b_str}` }

                0b0010  { return `jb {b_str}` }
                0b1010  { return `jae {b_str}` }
                0b0011  { return `jbe {b_str}` }
                0b1011  { return `ja {b_str}` }

                0b0100  { return `jl {b_str}` }
                0b1100  { return `jge {b_str}` }
                0b0101  { return `jle {b_str}` }
                0b1101  { return `jg {b_str}` }

        }

        OP_RAM {

            const LOAD_8    = 0
            const STORE_8   = 1
            const LOAD_16   = 2
            const STORE_16  = 3
            const PLOAD_8   = 4
            const PSTORE_8  = 5
            const PLOAD_16  = 6
            const PSTORE_16 = 7

            switch opcode
                LOAD_8    { return `load_8 {dest_str}, [{b_str}]` }
                STORE_8   { return `store_8 [{b_str}], {a_str}` }
                LOAD_16   { return `load_16 {dest_str}, [{b_str}]` }
                STORE_16  { return `store_16 [{b_str}], {a_str}` }
                PLOAD_8   { return `pload_8 {dest_str}, [{b_str}]` }
                PSTORE_8  { return `pstore_8 [{b_str}], {a_str}` }
                PLOAD_16  { return `pload_16 {dest_str}, [{b_str}]` }
                PSTORE_16 { return `pstore_16 [{b_str}], {a_str}` }

        }


}

def get_random_wide_instruction() Int {

    var mode = random(4)

    let immediate = random(2) == 0

    let d_vec = random(8) << 20
    let a_vec = random(8) << 16
    let b_vec = immediate ? 1 << 28 | random(0xffff) : random(8) << 8

    let d_ext = random(3) << 37
    let a_ext = random(3) << 34
    let b_ext = immediate ? 0 : random(3) << 31

    switch mode


        OP_IO {

            switch random(3) 
                0 { return 0 }
                1 { return OP_IO << 29 | d_vec | d_ext }
                2 { return OP_IO << 29 | 1 << 24 | a_vec | a_ext }

        }

        OP_ALU {

            let opcode = random(10)

            if opcode == 9 {

                return OP_ALU << 29 | opcode << 24 | 6 << 20 | a_vec | a_ext | b_vec | b_ext

            }

            return OP_ALU << 29 | opcode << 24 | d_vec | d_ext | a_vec | a_ext | b_vec

        }
        
        OP_RAM {

            let opcode = random(2)

            switch opcode
                0 {

                    return OP_RAM << 29 | opcode << 24 | d_vec | d_ext | b_vec | b_ext

                }
                1 {

                    return OP_RAM << 29 | opcode << 24 | 1 << 24 | b_vec | b_ext | a_vec | a_ext

                }

        }

        OP_JMP {

            var opcode = random(14)
            while opcode != 0b0001 && opcode != 0b1001 && opcode != 0b0010 && opcode != 0b1010 && opcode != 0b0011 && opcode != 0b1011 && opcode != 0b0100 && opcode != 0b1100 && opcode != 0b0101 && opcode != 0b1101 {
                opcode = random(14)
            }

            return OP_JMP << 29 | opcode << 24 | 0b111 << 20 | ((b_vec >> 2) << 2) | b_ext

        }

}

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    inputs[0] = get_random_wide_instruction()
    inputs[1] = get_random_wide_instruction()
    inputs[2] = get_random_wide_instruction()

    inputs[3] = random(128)
    inputs[4] = random(128)

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {


    return win

}

