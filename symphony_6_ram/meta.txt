kind = sequential
title = "RAM"
size = [-256, -256, 255, 255]
immutable_program = true
immutable_spec = true
no_score = true
copy_solution_to_level = ["symphony_7_ssd"]
dialogue = [
    (info, `In this level we add loading and storing from memory. We store and load from the same memory that is used for the program, so add extra load and store pin to the RAM component. 

The top input will be for a new memory reading capability, so set it's width to 16. Set the width of the second pin to 32, since this will be used to read our instructions.`)
    (info, `Once again, these are the [color=#ff9800]Modes[/color] of [color=#e49f44]Symphony[/color]:

[code]0 IO
1 ALU
2 JUMP
3 RAM[/code]

And the encoding looks like this:
[code][color=#ff9800]M[/color] = Mode
[color=#ff6680]O[/color] = Opcode
[color=#9966ff]I[/color] = Immediate bit
[color=#ffe666]D[/color] = Destination register
[color=#66ff99]A[/color] = Argument A
[color=#66ccff]B[/color] = Argument B
[color=#bbbbbb]0[/color] = Unused / zero[/code]

[code][color=#bbbbbb]O[/color][color=#ff9800]MM[/color][color=#9966ff]I[/color][color=#ff6680]OOOO[/color] [color=#ffe666]DDDD[/color][color=#66ff99]AAAA[/color] [color=#bbbbbb]0000[/color][color=#66ccff]BBBB[/color] [color=#bbbbbb]00000000[/color][/code]

In this level we implement the RAM mode. There are two opcodes in this mode:
[code]0 load
1 store[/code]

The 'load' instruction should load the value at address [color=#66ccff]argument B[/color] and store the result in [color=#ffe666]destination[/color].

The 'store' instruction should store [color=#66ccff]argument A[/color] at address [color=#66ccff]argument B[/color].
`),
    (info, `
    TODO, write about store pins and ordering and why they must go on top or they will cause a circular dependency
    TODO, check RAM size is large enough
    `),
]
default_isa_spec = `

[settings]
name = "Symphony"

[fields]

register
zr 0000
r1 0001
r2 0010
r3 0011
r4 0100
r5 0101
r6 0110
r7 0111
r8 1000
r9 1001
r10 1010
r11 1011
r12 1100
r13 1101
sp 1110
flags 1111

[instructions]

load_8 %dest(register), [%address(register)]
01100000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_8 [%address(register)], %value(register)
01100001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_8 %dest(register), [%address(immediate)]
01110000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_8 [%address(immediate)], %value(register)
01110001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

load_16 %dest(register), [%address(register)]
01100010 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_16 [%address(register)], %value(register)
01100011 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_16 %dest(register), [%address(immediate)]
01110010 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_16 [%address(immediate)], %value(register)
01110011 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

pload_8 %dest(register), [%address(register)]
01100100 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_8 [%address(register)], %value(register)
01100101 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_8 %dest(register), [%address(immediate)]
01110100 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_8 [%address(immediate)], %value(register)
01110101 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

pload_16 %dest(register), [%address(register)]
01100110 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_16 [%address(register)], %value(register)
01100111 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_16 %dest(register), [%address(immediate)]
01110110 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_16 [%address(immediate)], %value(register)
01110111 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

or %a(register), %b(register), %c(register)
00100001 aaaabbbb 0000cccc 00000000
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(register)
00100000 aaaabbbb 0000cccc 00000000
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(register)
00100011 aaaabbbb 0000cccc 00000000
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(register)
00100010 aaaabbbb 0000cccc 00000000
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(register)
00100100 aaaabbbb 0000cccc 00000000
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(register)
00100101 aaaabbbb 0000cccc 00000000
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(register)
00100110 aaaabbbb 0000cccc 00000000
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(register)
00100111 aaaabbbb 0000cccc 00000000
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(register)
00101000 aaaabbbb 0000cccc 00000000
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
00101001 1111aaaa 0000bbbb 00000000
Compares %a and %b and store the resulting flags in r6.

mul %a(register), %b(register), %c(register)
00101010 aaaabbbb 0000cccc 00000000
MUL %b and %c and store the result in %a.

nand %a(register), %b(register), %c(immediate)
00110000 aaaabbbb cccccccc cccccccc
NAND %b and %c and store the result in %a.

or %a(register), %b(register), %c(immediate)
00110001 aaaabbbb cccccccc cccccccc
OR %b and %c and store the result in %a.

or %a(register), %b(register), %c(immediate)
00110001 aaaabbbb cccccccc cccccccc
OR %b and %c and store the result in %a.

nor %a(register), %b(register), %c(immediate)
00110011 aaaabbbb cccccccc cccccccc
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(immediate)
00110010 aaaabbbb cccccccc cccccccc
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(immediate)
00110100 aaaabbbb cccccccc cccccccc
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(immediate)
00110101 aaaabbbb cccccccc cccccccc
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(immediate)
00110110 aaaabbbb cccccccc cccccccc
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(immediate)
00110111 aaaabbbb cccccccc cccccccc
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(immediate)
00111000 aaaabbbb cccccccc cccccccc
LSR %b and %c and store the result in %a.

mul %a(register), %b(register), %c(immediate)
00111010 aaaabbbb cccccccc cccccccc
MUL %b and %c and store the result in %a.

cmp %a(register), %b(immediate)
00111001 1111aaaa bbbbbbbb bbbbbbbb
Compares %a and %b and store the resulting flags in r6.



jmp %a(register)
01001000 00001111 0000aaaa 00000000
Jump to %a


jmp %a(immediate | label)
01011000 00001111 aaaaaaaa aaaaaaaa
Jump to %a

je %a(immediate | label)
01010001 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the values were equal (reading results from 'flags').

jne %a(immediate | label)
01011001 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the values were not equal (reading results from 'flags').


jb %a(immediate | label)
01010010 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was below (unsigned) the second (reading results from 'flags').

jae %a(immediate | label)
01011010 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) or euqal to the second (reading results from 'flags').

jbe %a(immediate | label)
01010011 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the First value was below (unsigned) or equal to the second (reading results from 'flags').

ja %a(immediate | label)
01011011 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) the second (reading results from 'flags').


jl %a(immediate | label)
01010100 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) than the second (reading results from 'flags').

jge %a(immediate | label)
01011100 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) or equal to the second (reading results from 'flags').

jle %a(immediate | label)
01010101 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) or equal to the second (reading results from 'flags').

jg %a(immediate | label)
01011101 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) than the second (reading results from 'flags').


in %a(register)
00000001 aaaa0000 00000000 00000000
Loads an input and stores it in %a

out %a(register)
00000010 00000000 0000aaaa 00000000
Sends %a to output

load_8 %dest(register), [%address(register)]
11000000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_8 [%address(register)], %value(register)
11000001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_8 %dest(register), [%address(immediate)]
11010000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_8 [%address(immediate)], %value(register)
11010001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

load_16 %dest(register), [%address(register)]
11000010 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_16 [%address(register)], %value(register)
11000011 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_16 %dest(register), [%address(immediate)]
11010010 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_16 [%address(immediate)], %value(register)
11010011 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

nop
00000000 00000000 00000000 00000000
Does nothing

`
default_assembly = `in r1
in r2
in r3
in r4
in r5
in r6
in r7
in r8
in r9
in r10
in r11
in r12
in r13
in sp
in flags

cmp r8, r5
store_16 [5380], r4
store_8 [3832], r4
nor sp, sp, 45544
load_8 r13, [3830]
jmp label_6
jmp label_7
jle label_8
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_9:
nand r1, zr, r1
jle label_9
label_8:
label_7:
label_6:
out r2
jmp label_15
store_8 [3832], r12
label_15:
in r6
out r8
store_16 [4882], r5
store_16 [5380], r4
store_8 [5380], flags
cmp sp, r5
sub r7, r5, r9
or r2, r11, 42404
nand r2, r8, 6928
load_16 sp, [3830]
load_16 r7, [4882]
load_8 r3, [3832]
out r13
load_8 sp, [5380]
jmp label_34
load_16 r7, [3832]
label_34:
store_16 [5380], r8
jmp label_38
load_8 r3, [3830]
label_38:
cmp sp, r9
load_16 r8, [3830]
xor r12, r13, 55450
store_8 [4882], sp
out r3
load_16 r3, [5380]
cmp r8, r2
cmp r6, r10
load_16 r12, [3832]
jb label_50
load_16 r12, [4882]
label_50:
load_8 flags, [5380]
load_8 r11, [4882]
out r7
store_8 [5380], r13
store_8 [4882], r2
cmp r6, flags
load_8 zr, [5380]
store_16 [3830], r4
store_16 [4882], r7
cmp r8, r12
out sp
store_16 [5380], r8
load_16 r4, [3830]
load_16 r8, [5380]
store_8 [3832], r5
store_16 [3832], r6
load_8 r7, [4882]
store_8 [3830], r12
load_8 sp, [3830]
in r8
load_8 r10, [3832]
store_8 [3832], r2
jge label_80
store_16 [3830], r5
label_80:
load_8 r4, [3832]
jmp label_84
jmp label_85
load_8 r7, [3830]
label_85:
label_84:
out r5
store_8 [4882], flags
store_16 [3832], r10
jmp label_93
load_8 r3, [4882]
label_93:
load_8 r5, [3832]
store_16 [5380], r2
store_16 [4882], flags
je label_100
store_16 [3830], sp
label_100:
xor r9, r1, 11489
load_16 r13, [5380]
load_8 r3, [3830]
load_16 sp, [5380]
load_8 r10, [4882]
jmp label_108
store_16 [5380], r1
label_108:
in r6
ja label_112
load_8 r11, [3832]
label_112:
store_8 [3830], r6
out r3
add r11, r8, r5
store_16 [3830], flags
store_16 [5380], r1
jmp label_122
load_16 r9, [5380]
label_122:
cmp r1, r2
load_8 r9, [4882]
store_16 [4882], r3
jmp label_129
load_16 r13, [5380]
label_129:
out r2
load_8 r8, [5380]
store_8 [3832], r4
store_8 [3832], r11
cmp r6, r10
store_16 [4882], r3
store_8 [4882], r11
store_16 [3832], r10
load_8 r9, [5380]
store_16 [5380], r11
load_8 r13, [5380]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_144:
nand r1, zr, r1
jle label_144
and r8, r11, r9
cmp zr, r9
lsr zr, r12, r12
je label_149
load_8 sp, [3832]
label_149:
store_16 [3830], r13
load_16 r11, [5380]
cmp r10, r13
jmp label_155
jmp label_156
in r7
label_156:
label_155:
load_16 flags, [4882]
load_16 sp, [4882]
load_8 r7, [3832]
load_8 r5, [3832]
load_16 r8, [5380]
sub r3, flags, r10
store_8 [3830], r1
cmp r8, flags
xor r10, r3, r2
load_16 r9, [4882]
load_8 r1, [5380]
cmp flags, sp
store_8 [3832], r9
out r2
xor r11, r2, 10803
load_8 sp, [4882]
store_16 [3832], r6
load_8 r13, [4882]
in r1
store_16 [3832], r11
jmp label_182
label_182:
load_8 r7, [4882]
store_16 [3832], r12
load_16 r13, [3830]
store_16 [3832], r4
load_8 r6, [3832]
load_8 r7, [4882]
store_16 [3832], sp
store_16 [4882], r1
nor r1, r2, r4
load_8 r6, [3830]
load_16 zr, [5380]
load_16 r13, [3830]
out r3
in r11
jmp label_200
store_8 [4882], r2
label_200:
store_16 [4882], r9
jmp label_204
store_8 [5380], r8
label_204:
load_16 r7, [5380]
store_16 [5380], r3
store_8 [4882], r3
load_16 r4, [4882]
store_16 [4882], r11
load_8 r5, [4882]
store_16 [3830], r13
jmp label_214
and r1, r2, 58304
label_214:
load_16 r2, [3830]
store_8 [5380], r9
jae label_219
store_16 [3830], r6
label_219:
store_16 [3832], r13
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_223:
nand r1, zr, r1
jg label_223
jmp label_225
store_8 [5380], r12
label_225:
load_16 r12, [5380]
store_16 [4882], r4
cmp r2, r13
load_8 r4, [3830]
load_16 r9, [4882]
load_8 r4, [5380]
in r6
store_16 [3830], r4
load_16 flags, [5380]
mul r2, r7, sp
load_8 r4, [3832]
in r9
and r8, r2, 32452
out flags
out r6
store_16 [3830], flags
store_8 [3832], r9
jmp label_249
jne label_250
mul flags, r3, r7
label_250:
label_249:
load_8 r13, [4882]
load_8 r1, [3830]
in r12
jne label_257
in r13
label_257:
store_8 [3830], r8
in r12
store_16 [5380], sp
in r5
out r2
jbe label_267
load_8 r12, [4882]
label_267:
load_16 r5, [3830]
store_16 [5380], r12
store_16 [3830], r5
store_16 [3830], zr
load_16 r5, [5380]
lsl r10, r13, 7150
load_8 r10, [5380]
load_8 r2, [3832]
load_8 r6, [5380]
jmp label_281
out r2
label_281:
lsr r6, r1, r5
load_16 r1, [4882]
jmp label_286
jmp label_287
label_287:
label_286:
in r12
xor r11, r2, 62840
store_8 [5380], flags
load_8 r11, [3832]
store_16 [5380], r3
store_8 [3830], r11
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_298:
nand r1, zr, r1
jl label_298
load_8 r8, [3830]
load_8 r8, [3830]
jmp label_302
store_8 [5380], flags
label_302:
load_8 r9, [3830]
store_16 [5380], r11
load_8 r5, [3830]
store_16 [4882], r5
load_16 r8, [3832]
store_16 [3832], r10
out flags
store_16 [4882], r7
store_8 [4882], r9
jmp label_317
load_16 zr, [3830]
label_317:
load_8 r8, [4882]
store_16 [3832], flags
load_16 r10, [4882]
load_8 r12, [4882]
lsl r6, r9, 27131
load_8 sp, [5380]
store_8 [3830], r10
store_8 [4882], r2
load_16 r1, [5380]
load_16 r5, [3830]
load_16 r10, [3830]
cmp sp, r6
store_8 [3830], r9
out r2
ja label_337
load_16 r11, [3830]
label_337:
load_8 r1, [5380]
out zr
cmp r2, sp
load_8 r1, [3830]
cmp r13, r6
in flags
store_16 [3832], r6
in r5
nand r1, r5, flags
store_16 [4882], sp
store_16 [3830], r13
add r12, r6, flags
load_8 zr, [3830]
load_16 r3, [3830]
store_8 [3832], r2
store_8 [3830], r3
load_8 r1, [3832]
store_8 [5380], zr
store_16 [4882], r13
store_16 [3832], r8
store_8 [3832], r13
in r6
out zr
store_8 [5380], r11
load_8 r11, [4882]
in r6
load_8 r2, [5380]
store_16 [3832], sp
store_16 [3830], r4
load_16 r9, [3830]
jmp label_370
jmp label_371
label_371:
label_370:
load_16 r4, [3832]
jbe label_377
sub r4, r12, 28625
label_377:
jle label_380
store_8 [3830], r9
label_380:
load_16 flags, [5380]
load_8 r3, [3832]
out r13
and r2, r7, r9
store_8 [5380], r1
store_8 [5380], r4
store_8 [5380], zr
jae label_390
store_8 [5380], r11
label_390:
cmp zr, r12
jmp label_395
nand zr, r4, r3
label_395:
load_16 r6, [3830]
load_16 sp, [4882]
load_16 r13, [3830]
load_8 r12, [3830]
mul r7, zr, r12
store_16 [3832], zr
store_16 [3832], r3
load_16 r9, [4882]
je label_408
jmp label_409
load_16 r11, [3832]
label_409:
label_408:
in flags
store_16 [3830], r9
store_8 [3830], r11
in r12
load_8 r6, [5380]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_420:
nand r1, zr, r1
jge label_420
jg label_422
jae label_423
store_16 [4882], r9
label_423:
label_422:
cmp r9, r1
out flags
in flags
store_8 [4882], r12
store_16 [5380], flags
store_16 [4882], r7
store_16 [3832], r10
store_16 [3832], zr
store_8 [4882], r8
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_436:
nand r1, zr, r1
jge label_436
jmp label_438
load_8 r5, [4882]
label_438:
in flags
store_8 [5380], r10
load_8 r2, [4882]
and sp, r2, 53595
cmp sp, zr
load_16 r6, [5380]
load_16 r6, [5380]
and r1, r13, 43490
load_16 r4, [3832]
store_8 [5380], r9
xor r9, flags, 14418
store_16 [3830], r3
load_8 r2, [3832]
jmp label_456
load_8 r2, [5380]
label_456:
out r6
load_16 r11, [4882]
store_16 [5380], sp
load_16 r10, [3832]
store_16 [5380], r9
out r11
load_16 zr, [5380]
nor r7, r7, r7
jmp label_472
in r4
label_472:
load_8 r3, [5380]
store_8 [5380], zr
store_8 [4882], flags
jmp label_481
load_16 r3, [3832]
label_481:
and flags, r11, 13308
load_16 r8, [3830]
store_8 [5380], sp
jmp label_489
load_16 r10, [5380]
label_489:
store_16 [3832], r4
store_16 [3830], r12
jmp label_494
jbe label_495
load_16 r11, [3830]
label_495:
label_494:
load_8 flags, [3832]
store_16 [3832], flags
out r3
store_16 [4882], r10
load_16 r9, [3832]
out r1
store_16 [5380], flags
load_8 r4, [4882]
jmp label_510
store_8 [4882], r10
label_510:
out r4
load_16 flags, [3830]
jmp label_515
label_515:
store_8 [5380], sp
jmp label_519
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_520:
nand r1, zr, r1
je label_520
label_519:
cmp r9, r1
jmp label_524
load_8 r4, [4882]
label_524:
lsl r3, r11, 21032
store_16 [3830], r4
store_16 [5380], r13
store_16 [5380], r3
load_16 flags, [4882]
store_8 [3830], r10
store_8 [3830], r7
load_16 r8, [4882]
in r4
load_8 r2, [4882]
store_16 [4882], r8
in r11
store_8 [3830], r6
store_16 [3830], zr
load_8 r13, [3832]
cmp r7, r4
store_16 [3832], r7
store_16 [4882], r11
jmp label_549
jae label_550
in r7
label_550:
label_549:
jmp label_554
lsr r9, r1, r10
label_554:
out r2
sub sp, r2, 9398
load_8 r12, [5380]
load_16 r6, [3832]
in r10
store_8 [3830], sp
in r7
store_8 [3832], r1
out r5
cmp r9, r11
store_8 [3832], r6
cmp r8, r9
load_16 flags, [3830]
store_16 [4882], r7
load_8 r5, [5380]
load_8 r11, [4882]
cmp r11, r7
load_8 r8, [5380]
load_8 r12, [4882]
store_8 [4882], r11
xor r7, r8, r11
cmp r13, r6
store_8 [5380], r6
cmp flags, r5
store_16 [4882], r13
load_8 r7, [3830]
store_16 [4882], r9
jne label_591
out r5
label_591:
sub r10, r11, r12
load_16 r10, [3832]
store_16 [4882], r10
load_8 r2, [3832]
cmp r12, r4
load_8 r4, [4882]
add sp, r5, 58031
store_8 [3830], r6
load_16 r7, [4882]
cmp r12, r9
store_8 [3832], r13
cmp sp, r3
jmp label_608
jmp label_609
jb label_610
store_8 [3830], r7
label_610:
label_609:
label_608:
cmp r10, r11
cmp r1, sp
jmp label_618
load_16 zr, [3830]
label_618:
in flags
load_16 r9, [4882]
store_16 [3830], r6
load_8 zr, [3830]
load_16 sp, [5380]
jmp label_626
store_16 [3830], r13
label_626:
store_16 [5380], r6
store_16 [3832], r10
load_16 r12, [5380]
jmp label_632
cmp r7, r4
label_632:
load_8 zr, [5380]
jmp label_636
out r6
label_636:
load_8 r13, [5380]
load_8 r10, [3830]
load_16 r9, [5380]
out r1
cmp r2, r5
jae label_645
jge label_646
store_8 [5380], r11
label_646:
label_645:
load_16 r6, [4882]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_651:
nand r1, zr, r1
jl label_651
store_16 [4882], r9
jmp label_654
load_8 zr, [3830]
label_654:
load_8 r12, [3832]
store_16 [4882], r1
store_8 [5380], sp
store_16 [4882], r7
jmp label_664
store_8 [3832], zr
label_664:
store_16 [5380], r7
load_16 r7, [5380]
jmp label_671
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_672:
nand r1, zr, r1
jge label_672
label_671:
load_16 r7, [5380]
store_8 [4882], flags
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_677:
nand r1, zr, r1
je label_677
load_16 sp, [4882]
jmp label_680
cmp r12, r1
label_680:
xor zr, r4, 51006
store_16 [4882], r5
store_8 [5380], r13
jmp label_686
lsl r13, r12, r10
label_686:
store_8 [3832], sp
store_16 [3832], r6
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_691:
nand r1, zr, r1
jb label_691
load_16 r3, [4882]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_694:
nand r1, zr, r1
je label_694
store_8 [3832], r11
jmp label_697
in r12
label_697:
load_16 r8, [5380]
jmp label_701
cmp sp, r5
label_701:
load_16 r1, [3832]
xor r11, r1, 17251
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_706:
nand r1, zr, r1
ja label_706
load_8 r11, [3832]
load_8 r13, [5380]
in r8
load_16 r2, [5380]
load_8 r7, [5380]
jmp label_716
store_16 [5380], r12
label_716:
or r4, r9, r10
store_8 [4882], r1
jmp label_722
label_722:
load_16 r11, [4882]
store_16 [3830], r5
store_8 [4882], r3
store_8 [4882], r1
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_729:
nand r1, zr, r1
jmp label_729
load_16 flags, [3832]
or zr, r12, 10633
store_16 [4882], r2
jmp label_734
store_8 [3830], r8
label_734:
store_16 [4882], r9
cmp r4, zr
load_8 r10, [3832]
out r9
and sp, r10, r9
jmp label_744
label_744:
store_16 [4882], zr
sub r12, r7, r7
cmp sp, sp
jmp label_752
store_8 [3830], flags
label_752:
load_16 r5, [4882]
load_8 flags, [5380]
jmp label_758
load_16 zr, [3832]
label_758:
cmp r1, r6
jmp label_762
load_16 r2, [4882]
label_762:
or r6, r10, 50284
out flags
store_8 [3830], r4
store_8 [5380], r3
load_8 r3, [3832]
store_16 [3832], r10
store_8 [5380], zr
load_8 r12, [4882]
store_16 [3832], r2
load_16 r12, [3832]
store_16 [3830], r1
store_8 [4882], r2
load_16 flags, [5380]
cmp flags, r2
store_8 [3832], r11
load_16 r7, [3832]
store_8 [3830], r12
store_16 [5380], r6
jmp label_786
store_8 [3832], zr
label_786:
in r12
load_16 r1, [5380]
out r6
store_16 [3830], r2
store_8 [3830], r13
store_16 [5380], r11
load_8 r10, [3832]
cmp r3, r13
store_8 [3830], r3
store_16 [5380], r13
store_8 [4882], r4
cmp r9, r8
load_8 r2, [3832]
out r1
nor r4, r3, zr
load_16 r7, [5380]
add r12, r3, 59191
in r9
store_8 [3830], sp
jge label_812
jmp label_813
load_16 r8, [5380]
label_813:
label_812:
load_8 r8, [4882]
store_8 [3832], r4
je label_821
sub r13, r4, r9
label_821:
in r1
load_8 zr, [3830]
store_8 [4882], r12
jne label_828
jmp label_829
jl label_830
store_8 [3832], r7
label_830:
label_829:
label_828:
store_8 [3830], sp
load_16 r5, [3830]
cmp r2, r5
and r11, r9, r3
load_16 r8, [5380]
store_8 [3832], flags
jmp label_842
jl label_843
store_16 [5380], r11
label_843:
label_842:
load_16 r7, [3830]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_848:
nand r1, zr, r1
jmp label_848
load_16 r1, [3830]
store_8 [3830], r1
store_16 [3830], r6
store_8 [3832], r4
load_16 r5, [3832]
load_8 r3, [4882]
ja label_856
load_16 r10, [4882]
label_856:
cmp r11, r12
load_16 r6, [3830]
jmp label_861
store_8 [5380], sp
label_861:
jmp label_864
store_16 [3830], r3
label_864:
store_16 [4882], r8
load_16 sp, [3830]
cmp r13, r10
jle label_870
store_16 [5380], r12
label_870:
or r12, r13, 33891
load_16 r9, [3830]
jg label_876
cmp r1, r4
label_876:
store_16 [4882], r10
load_8 r10, [5380]
load_8 sp, [3830]
jmp label_883
label_883:
load_8 sp, [5380]
load_8 r4, [3832]
store_16 [3830], r9
store_16 [5380], r5
load_16 r12, [5380]
store_16 [4882], r12
load_16 r1, [5380]
load_8 r2, [4882]
jmp label_895
lsl r11, r8, 43940
label_895:
store_8 [3832], sp
load_8 zr, [4882]
cmp zr, r9
load_16 r5, [3832]
jmp label_903
jl label_904
store_16 [4882], r11
label_904:
label_903:
jmp label_908
load_8 r5, [3830]
label_908:
jmp label_911
out zr
label_911:
load_8 r8, [5380]
nand r5, r13, r6
store_16 [3832], r7
store_16 [3832], r4
store_16 [4882], r10
store_8 [4882], r6
load_8 r4, [5380]
sub r1, r11, 11123
store_8 [4882], flags
load_16 r6, [3830]
store_16 [5380], r7
load_16 r6, [5380]
jmp label_928
load_8 r11, [3832]
label_928:
load_8 r8, [3830]
load_8 r4, [3830]
jmp label_934
load_8 r3, [5380]
label_934:
and r1, r9, r12
store_16 [4882], r3
in r4
out r4
jmp label_942
load_16 r7, [3830]
label_942:
jne label_945
and r5, r12, 21909
label_945:
load_8 r11, [3832]
or r1, zr, 0
or r2, zr, 1
cmp r1, r2
label_950:
nand r1, zr, r1
jae label_950
store_16 [5380], r1
jmp label_954
ja label_955
cmp r3, r3
label_955:
label_954:
sub r2, r2, 65300
mul r1, r1, 27053
cmp sp, r7
cmp r2, r7
store_8 [3832], r13
store_16 [3832], r6
mul r8, r12, r1
out r4
lsl r1, r12, 51458
store_16 [5380], r1
jmp label_970
lsl r8, r4, r10
label_970:
jb label_974
jb label_975
load_16 r8, [4882]
label_975:
label_974:
load_16 r6, [3832]
store_8 [5380], r1
store_16 [3832], r4
store_16 [3830], r13
jb label_983
load_16 r5, [5380]
label_983:
sub r5, r13, 53801
store_16 [4882], r4
load_8 r5, [3832]
load_8 r6, [3830]
jmp label_994
mul sp, r5, 58244
label_994:
jmp label_997
load_8 sp, [4882]
label_997:
store_8 [5380], r9
`